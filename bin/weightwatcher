#!/usr/bin/env node

var program = require('commander');
var _ = require('lodash');
var Q = require('q');
var main = require(__dirname + '/../src/main');
var pkg = require(__dirname + '/../package.json');

var DEFAULT_CONFIG_FILE = '.weightwatcher-config.js';

program
    .version(pkg.version)
    .usage('[options] [command] [args...]')
    .option('-c, --config-file <filename>', 'read configuration from given file, instead of default "' + DEFAULT_CONFIG_FILE + '"')
    .on('--help', help)
    .parse(process.argv);

function help() {
    console.log(
        '  Where [command] is one of:\n\n' +
        '    sensors              list currently available sensor modules\n' +
        '    show [sensor...]     show the current value of all sensors, or just the named one(s)\n' +
        '    record [sensor...]   same as above, but instead records the current value(s) into the data file\n' +
        '    viewer [path]        outputs the viewer application to given path, or to `pwd` if omitted\n' +
        ''
    );
    console.log(
        '  Examples:\n\n' +
        '    $ ' + program._name + ' show sloc\n\n' +
        '        Displays the current source code statistics (as provided by the "sloc" sensor), and then exits without touching anything.\n' +
        ''
    );
}

function output(input) {
    console.log(input);
}

function getAllSensorNames(configFilePath) {
    return main.getCurrentConfiguration(configFilePath).then(function(config) {
        return _.keys(config.sensors);
    });
}

var subcmd = program.args[0];
var subargs = program.args.slice(1);
var configFilePath = program.configFile || DEFAULT_CONFIG_FILE;

if (subcmd === 'sensors')Â {

    getAllSensorNames(configFilePath).invoke('forEach', output).done();

} else if (subcmd === 'show') {

    Q.when().then(function() {
        return subargs.length ? subargs : getAllSensorNames();
    }).then(function(sensorNames) {
        return Q.all(sensorNames.map(function(sensorName) {
            return main.getCurrentReading(sensorName, configFilePath).then(function(currentReading) {
                if (subargs.length !== 1) {
                    output(sensorName);
                }
                output(currentReading);
            });
        }));
    }).done();

} else if (subcmd === 'record') {

    Q.when().then(function() {
        return subargs.length ? subargs : getAllSensorNames();
    }).then(function(sensorNames) {
        return main.writeLogEntry(sensorNames, configFilePath);
    }).then(output).done();

} else if (subcmd === 'viewer') {

    main.outputViewerHTML(subargs[0] || '.', configFilePath).then(output).done();

} else {

    program.help();

}
